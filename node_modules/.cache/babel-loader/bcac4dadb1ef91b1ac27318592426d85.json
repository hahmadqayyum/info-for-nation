{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport let CapsuleRange;\n\n(function (CapsuleRange) {\n  CapsuleRange[\"Past\"] = \"past\";\n  CapsuleRange[\"Upcoming\"] = \"upcoming\";\n})(CapsuleRange || (CapsuleRange = {}));\n\nexport let LaunchRange;\n\n(function (LaunchRange) {\n  LaunchRange[\"Latest\"] = \"latest\";\n  LaunchRange[\"Next\"] = \"next\";\n  LaunchRange[\"Past\"] = \"past\";\n  LaunchRange[\"Upcoming\"] = \"upcoming\";\n})(LaunchRange || (LaunchRange = {}));\n\nexport let Order;\n\n(function (Order) {\n  Order[\"Asc\"] = \"asc\";\n  Order[\"Desc\"] = \"desc\";\n})(Order || (Order = {}));\n\nexport let CacheControlScope;\n\n(function (CacheControlScope) {\n  CacheControlScope[\"Public\"] = \"PUBLIC\";\n  CacheControlScope[\"Private\"] = \"PRIVATE\";\n})(CacheControlScope || (CacheControlScope = {}));\n\nexport const LaunchesDocument = gql`\n    query Launches {\n  launches {\n    flight_number\n    mission_name\n    launch_success\n    launch_year\n  }\n}\n    `;\n/**\n * __useLaunchesQuery__\n *\n * To run a query within a React component, call `useLaunchesQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useLaunchesQuery(baseOptions) {\n  _s();\n\n  return Apollo.useQuery(LaunchesDocument, baseOptions);\n}\n\n_s(useLaunchesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useLaunchesLazyQuery(baseOptions) {\n  _s2();\n\n  return Apollo.useLazyQuery(LaunchesDocument, baseOptions);\n}\n\n_s2(useLaunchesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const LaunchInfoDocument = gql`\n    query LaunchInfo($id: String) {\n  launch(id: $id) {\n    mission_name\n    launch_success\n    launch_year\n    flight_number\n    launch_date_utc\n    launch_site {\n      site_name_long\n    }\n    rocket {\n      rocket_name\n      rocket_type\n    }\n    details\n    links {\n      video_link\n      flickr_images\n    }\n  }\n}\n    `;\n/**\n * __useLaunchInfoQuery__\n *\n * To run a query within a React component, call `useLaunchInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useLaunchInfoQuery(baseOptions) {\n  _s3();\n\n  return Apollo.useQuery(LaunchInfoDocument, baseOptions);\n}\n\n_s3(useLaunchInfoQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useLaunchInfoLazyQuery(baseOptions) {\n  _s4();\n\n  return Apollo.useLazyQuery(LaunchInfoDocument, baseOptions);\n}\n\n_s4(useLaunchInfoLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const RocketInfoDocument = gql`\n    query RocketInfo($id: String!) {\n  rocket(id: $id) {\n    active\n    company\n    cost_per_launch\n    country\n    description\n    flickr_images\n    engines {\n      type\n      version\n    }\n    first_flight\n    height {\n      meters\n    }\n    rocket_name\n    rocket_type\n    rocket_id\n  }\n}\n    `;\n/**\n * __useRocketInfoQuery__\n *\n * To run a query within a React component, call `useRocketInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useRocketInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRocketInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useRocketInfoQuery(baseOptions) {\n  _s5();\n\n  return Apollo.useQuery(RocketInfoDocument, baseOptions);\n}\n\n_s5(useRocketInfoQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useRocketInfoLazyQuery(baseOptions) {\n  _s6();\n\n  return Apollo.useLazyQuery(RocketInfoDocument, baseOptions);\n}\n\n_s6(useRocketInfoLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const RocketsDocument = gql`\n    query Rockets {\n  rockets {\n    active\n    rocket_id\n    flickr_images\n    rocket_name\n  }\n}\n    `;\n/**\n * __useRocketsQuery__\n *\n * To run a query within a React component, call `useRocketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRocketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRocketsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useRocketsQuery(baseOptions) {\n  _s7();\n\n  return Apollo.useQuery(RocketsDocument, baseOptions);\n}\n\n_s7(useRocketsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useRocketsLazyQuery(baseOptions) {\n  _s8();\n\n  return Apollo.useLazyQuery(RocketsDocument, baseOptions);\n}\n\n_s8(useRocketsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const ShipInfoDocument = gql`\n    query ShipInfo($id: String!) {\n  ship(id: $id) {\n    active\n    attempted_landings\n    class\n    ship_id\n    imo\n    ship_name\n    speed_kn\n    successful_landings\n    ship_type\n    year_built\n    weight_kg\n    image\n  }\n}\n    `;\n/**\n * __useShipInfoQuery__\n *\n * To run a query within a React component, call `useShipInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useShipInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useShipInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useShipInfoQuery(baseOptions) {\n  _s9();\n\n  return Apollo.useQuery(ShipInfoDocument, baseOptions);\n}\n\n_s9(useShipInfoQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useShipInfoLazyQuery(baseOptions) {\n  _s10();\n\n  return Apollo.useLazyQuery(ShipInfoDocument, baseOptions);\n}\n\n_s10(useShipInfoLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const ShipsDocument = gql`\n    query Ships {\n  ships {\n    active\n    ship_id\n    ship_name\n    image\n  }\n}\n    `;\n/**\n * __useShipsQuery__\n *\n * To run a query within a React component, call `useShipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useShipsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useShipsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useShipsQuery(baseOptions) {\n  _s11();\n\n  return Apollo.useQuery(ShipsDocument, baseOptions);\n}\n\n_s11(useShipsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useShipsLazyQuery(baseOptions) {\n  _s12();\n\n  return Apollo.useLazyQuery(ShipsDocument, baseOptions);\n}\n\n_s12(useShipsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/home/ahmadqayyum/Desktop/info-for-nation/src/services/spacex/generated/graphql.tsx"],"names":["gql","Apollo","CapsuleRange","LaunchRange","Order","CacheControlScope","LaunchesDocument","useLaunchesQuery","baseOptions","useQuery","useLaunchesLazyQuery","useLazyQuery","LaunchInfoDocument","useLaunchInfoQuery","useLaunchInfoLazyQuery","RocketInfoDocument","useRocketInfoQuery","useRocketInfoLazyQuery","RocketsDocument","useRocketsQuery","useRocketsLazyQuery","ShipInfoDocument","useShipInfoQuery","useShipInfoLazyQuery","ShipsDocument","useShipsQuery","useShipsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  capsule?: Maybe<Capsule>;\n  capsules?: Maybe<Array<Maybe<Capsule>>>;\n  core?: Maybe<Core>;\n  cores?: Maybe<Array<Maybe<Core>>>;\n  dragon?: Maybe<Dragon>;\n  dragons?: Maybe<Array<Maybe<Dragon>>>;\n  history?: Maybe<Array<Maybe<History>>>;\n  info?: Maybe<Info>;\n  landingpad?: Maybe<Landingpad>;\n  landingpads?: Maybe<Array<Maybe<Landingpad>>>;\n  launch?: Maybe<Launch>;\n  launches?: Maybe<Array<Maybe<Launch>>>;\n  launchpad?: Maybe<Launchpad>;\n  launchpads?: Maybe<Array<Maybe<Launchpad>>>;\n  mission?: Maybe<Mission>;\n  missions?: Maybe<Array<Maybe<Mission>>>;\n  payload?: Maybe<Payload>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n  roadster?: Maybe<Roadster>;\n  rocket?: Maybe<Rocket>;\n  rockets?: Maybe<Array<Maybe<Rocket>>>;\n  ship?: Maybe<Ship>;\n  ships?: Maybe<Array<Maybe<Ship>>>;\n};\n\n\nexport type QueryCapsuleArgs = {\n  capsule_serial: Scalars['String'];\n};\n\n\nexport type QueryCapsulesArgs = {\n  range?: Maybe<CapsuleRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCoreArgs = {\n  core_serial: Scalars['String'];\n};\n\n\nexport type QueryCoresArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryDragonArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryDragonsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryHistoryArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLaunchArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLaunchesArgs = {\n  range?: Maybe<LaunchRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n\nexport type QueryLaunchpadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryLaunchpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMissionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryMissionsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPayloadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPayloadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRocketArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryRocketsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryShipArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryShipsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\nexport enum CapsuleRange {\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum LaunchRange {\n  Latest = 'latest',\n  Next = 'next',\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum Order {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type BasicMission = {\n  __typename?: 'BasicMission';\n  name?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n};\n\nexport type Capsule = {\n  __typename?: 'Capsule';\n  capsule_serial?: Maybe<Scalars['String']>;\n  capsule_id?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  landings?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  reuse_count?: Maybe<Scalars['Int']>;\n};\n\nexport type Core = {\n  __typename?: 'Core';\n  core_serial?: Maybe<Scalars['String']>;\n  block?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  reuse_count?: Maybe<Scalars['Int']>;\n  rtls_attempts?: Maybe<Scalars['Int']>;\n  rtls_landings?: Maybe<Scalars['Int']>;\n  asds_attempts?: Maybe<Scalars['Int']>;\n  asds_landings?: Maybe<Scalars['Int']>;\n  water_landing?: Maybe<Scalars['Boolean']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Dimension = {\n  __typename?: 'Dimension';\n  meters?: Maybe<Scalars['Float']>;\n  feet?: Maybe<Scalars['Float']>;\n};\n\nexport type Dragon = {\n  __typename?: 'Dragon';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  active?: Maybe<Scalars['Boolean']>;\n  crew_capacity?: Maybe<Scalars['Int']>;\n  sidewall_angle_deg?: Maybe<Scalars['Int']>;\n  orbit_duration_yr?: Maybe<Scalars['Int']>;\n  dry_mass_kg?: Maybe<Scalars['Int']>;\n  dry_mass_lb?: Maybe<Scalars['Int']>;\n  first_flight?: Maybe<Scalars['String']>;\n  heat_shield?: Maybe<HeatShield>;\n  thrusters?: Maybe<Array<Maybe<Thruster>>>;\n  launch_payload_mass?: Maybe<Mass>;\n  launch_payload_vol?: Maybe<PayloadVolume>;\n  return_payload_mass?: Maybe<Mass>;\n  return_payload_vol?: Maybe<PayloadVolume>;\n  pressurized_capsule?: Maybe<PressurizedCapsule>;\n  trunk?: Maybe<Trunk>;\n  height_w_trunk?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Engines = {\n  __typename?: 'Engines';\n  number?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  layout?: Maybe<Scalars['String']>;\n  engine_loss_max?: Maybe<Scalars['Int']>;\n  propellant_1?: Maybe<Scalars['String']>;\n  propellant_2?: Maybe<Scalars['String']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n  thrust_to_weight?: Maybe<Scalars['Float']>;\n};\n\nexport type Fairing = {\n  __typename?: 'Fairing';\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n};\n\nexport type Headquarters = {\n  __typename?: 'Headquarters';\n  address?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n};\n\nexport type HeatShield = {\n  __typename?: 'HeatShield';\n  material?: Maybe<Scalars['String']>;\n  size_meters?: Maybe<Scalars['Float']>;\n  temp_degrees?: Maybe<Scalars['Int']>;\n  dev_partner?: Maybe<Scalars['String']>;\n};\n\nexport type History = {\n  __typename?: 'History';\n  id?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  event_date_utc?: Maybe<Scalars['String']>;\n  event_date_unix?: Maybe<Scalars['Float']>;\n  flight_number?: Maybe<Scalars['Int']>;\n  details?: Maybe<Scalars['String']>;\n  links?: Maybe<HistoryLinks>;\n};\n\nexport type HistoryLinks = {\n  __typename?: 'HistoryLinks';\n  article?: Maybe<Scalars['String']>;\n  reddit?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n};\n\nexport type Info = {\n  __typename?: 'Info';\n  name?: Maybe<Scalars['String']>;\n  founder?: Maybe<Scalars['String']>;\n  founded?: Maybe<Scalars['Int']>;\n  employees?: Maybe<Scalars['Int']>;\n  vehicles?: Maybe<Scalars['Int']>;\n  launch_sites?: Maybe<Scalars['Int']>;\n  test_sites?: Maybe<Scalars['Int']>;\n  ceo?: Maybe<Scalars['String']>;\n  cto?: Maybe<Scalars['String']>;\n  coo?: Maybe<Scalars['String']>;\n  cto_propulsion?: Maybe<Scalars['String']>;\n  valuation?: Maybe<Scalars['Float']>;\n  headquarters?: Maybe<Headquarters>;\n  summary?: Maybe<Scalars['String']>;\n};\n\nexport type LandingLegs = {\n  __typename?: 'LandingLegs';\n  number?: Maybe<Scalars['Int']>;\n  material?: Maybe<Scalars['String']>;\n};\n\nexport type Landingpad = {\n  __typename?: 'Landingpad';\n  id?: Maybe<Scalars['String']>;\n  full_name?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  landing_type?: Maybe<Scalars['String']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Launch = {\n  __typename?: 'Launch';\n  flight_number?: Maybe<Scalars['Int']>;\n  mission_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  mission_name?: Maybe<Scalars['String']>;\n  launch_year?: Maybe<Scalars['Int']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_local?: Maybe<Scalars['String']>;\n  is_tentative?: Maybe<Scalars['Boolean']>;\n  tentative_max_precision?: Maybe<Scalars['String']>;\n  tbd?: Maybe<Scalars['Boolean']>;\n  launch_window?: Maybe<Scalars['Int']>;\n  rocket?: Maybe<LaunchRocket>;\n  ships?: Maybe<Array<Maybe<Scalars['String']>>>;\n  telemetry?: Maybe<LaunchTelemetry>;\n  launch_site?: Maybe<LaunchSite>;\n  launch_success?: Maybe<Scalars['Boolean']>;\n  links?: Maybe<LaunchLinks>;\n  details?: Maybe<Scalars['String']>;\n  upcoming?: Maybe<Scalars['Boolean']>;\n  static_fire_date_utc?: Maybe<Scalars['String']>;\n  static_fire_date_unix?: Maybe<Scalars['Float']>;\n  timeline?: Maybe<LaunchTimeline>;\n};\n\nexport type LaunchLinks = {\n  __typename?: 'LaunchLinks';\n  mission_patch?: Maybe<Scalars['String']>;\n  mission_patch_small?: Maybe<Scalars['String']>;\n  reddit_campaign?: Maybe<Scalars['String']>;\n  reddit_launch?: Maybe<Scalars['String']>;\n  reddit_recovery?: Maybe<Scalars['String']>;\n  reddit_media?: Maybe<Scalars['String']>;\n  presskit?: Maybe<Scalars['String']>;\n  article_link?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  video_link?: Maybe<Scalars['String']>;\n  youtube_id?: Maybe<Scalars['String']>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type Launchpad = {\n  __typename?: 'Launchpad';\n  id?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  vehicles_launched?: Maybe<Array<Maybe<Scalars['String']>>>;\n  attempted_launches?: Maybe<Scalars['Int']>;\n  successful_launches?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  site_id?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocket = {\n  __typename?: 'LaunchRocket';\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n  first_stage?: Maybe<LaunchRocketFirstStage>;\n  second_stage?: Maybe<LaunchRocketSecondStage>;\n  fairings?: Maybe<LaunchRocketFairings>;\n};\n\nexport type LaunchRocketFairings = {\n  __typename?: 'LaunchRocketFairings';\n  reused?: Maybe<Scalars['Boolean']>;\n  recovery_attempt?: Maybe<Scalars['Boolean']>;\n  recovered?: Maybe<Scalars['Boolean']>;\n  ship?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketFirstStage = {\n  __typename?: 'LaunchRocketFirstStage';\n  cores?: Maybe<Array<Maybe<LaunchRocketFirstStageCore>>>;\n};\n\nexport type LaunchRocketFirstStageCore = {\n  __typename?: 'LaunchRocketFirstStageCore';\n  core_serial?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n  block?: Maybe<Scalars['Int']>;\n  gridfins?: Maybe<Scalars['Boolean']>;\n  legs?: Maybe<Scalars['Boolean']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  land_success?: Maybe<Scalars['Boolean']>;\n  landing_intent?: Maybe<Scalars['Boolean']>;\n  landing_type?: Maybe<Scalars['String']>;\n  landing_vehicle?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketSecondStage = {\n  __typename?: 'LaunchRocketSecondStage';\n  block?: Maybe<Scalars['Int']>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n};\n\nexport type LaunchSite = {\n  __typename?: 'LaunchSite';\n  site_id?: Maybe<Scalars['String']>;\n  site_name?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTelemetry = {\n  __typename?: 'LaunchTelemetry';\n  flight_club?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTimeline = {\n  __typename?: 'LaunchTimeline';\n  webcast_liftoff?: Maybe<Scalars['Int']>;\n  go_for_prop_loading?: Maybe<Scalars['Int']>;\n  rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_lox_loading?: Maybe<Scalars['Int']>;\n  stage2_rp1_loading?: Maybe<Scalars['Int']>;\n  stage2_lox_loading?: Maybe<Scalars['Int']>;\n  engine_chill?: Maybe<Scalars['Int']>;\n  prelaunch_checks?: Maybe<Scalars['Int']>;\n  propellant_pressurization?: Maybe<Scalars['Int']>;\n  go_for_launch?: Maybe<Scalars['Int']>;\n  ignition?: Maybe<Scalars['Int']>;\n  liftoff?: Maybe<Scalars['Int']>;\n  maxq?: Maybe<Scalars['Int']>;\n  beco?: Maybe<Scalars['Int']>;\n  side_core_sep?: Maybe<Scalars['Int']>;\n  side_core_boostback?: Maybe<Scalars['Int']>;\n  meco?: Maybe<Scalars['Int']>;\n  stage_sep?: Maybe<Scalars['Int']>;\n  center_stage_sep?: Maybe<Scalars['Int']>;\n  second_stage_ignition?: Maybe<Scalars['Int']>;\n  center_core_boostback?: Maybe<Scalars['Int']>;\n  fairing_deploy?: Maybe<Scalars['Int']>;\n  first_stage_entry_burn?: Maybe<Scalars['Int']>;\n  side_core_entry_burn?: Maybe<Scalars['Int']>;\n  center_core_entry_burn?: Maybe<Scalars['Int']>;\n  seco_1?: Maybe<Scalars['Int']>;\n  first_stage_landing_burn?: Maybe<Scalars['Int']>;\n  first_stage_landing?: Maybe<Scalars['Int']>;\n  side_core_landing?: Maybe<Scalars['Int']>;\n  center_core_landing?: Maybe<Scalars['Int']>;\n  second_stage_restart?: Maybe<Scalars['Int']>;\n  seco_2?: Maybe<Scalars['Int']>;\n  payload_deploy?: Maybe<Scalars['Int']>;\n  payload_deploy_1?: Maybe<Scalars['Int']>;\n  payload_deploy_2?: Maybe<Scalars['Int']>;\n  dragon_separation?: Maybe<Scalars['Int']>;\n  dragon_solar_deploy?: Maybe<Scalars['Int']>;\n  dragon_bay_door_deploy?: Maybe<Scalars['Int']>;\n};\n\nexport type Location = {\n  __typename?: 'Location';\n  name?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type Mass = {\n  __typename?: 'Mass';\n  kg?: Maybe<Scalars['Int']>;\n  lb?: Maybe<Scalars['Int']>;\n};\n\nexport type Mission = {\n  __typename?: 'Mission';\n  mission_name?: Maybe<Scalars['String']>;\n  mission_id?: Maybe<Scalars['String']>;\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  payload_ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Payload = {\n  __typename?: 'Payload';\n  payload_id?: Maybe<Scalars['String']>;\n  norad_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  cap_serial?: Maybe<Scalars['String']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  customers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nationality?: Maybe<Scalars['String']>;\n  manufacturer?: Maybe<Scalars['String']>;\n  payload_type?: Maybe<Scalars['String']>;\n  payload_mass_kg?: Maybe<Scalars['Float']>;\n  payload_mass_lbs?: Maybe<Scalars['Float']>;\n  orbit?: Maybe<Scalars['String']>;\n  orbit_params?: Maybe<PayloadOrbitParams>;\n  mass_returned_kg?: Maybe<Scalars['Float']>;\n  mass_returned_lbs?: Maybe<Scalars['Float']>;\n  flight_time_sec?: Maybe<Scalars['Int']>;\n  cargo_manifest?: Maybe<Scalars['String']>;\n};\n\nexport type PayloadOrbitParams = {\n  __typename?: 'PayloadOrbitParams';\n  reference_system?: Maybe<Scalars['String']>;\n  regime?: Maybe<Scalars['String']>;\n  longitude?: Maybe<Scalars['Float']>;\n  semi_major_axis_km?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  periapsis_km?: Maybe<Scalars['Float']>;\n  apoapsis_km?: Maybe<Scalars['Float']>;\n  inclination_deg?: Maybe<Scalars['Float']>;\n  period_min?: Maybe<Scalars['Float']>;\n  lifespan_years?: Maybe<Scalars['Float']>;\n  epoch?: Maybe<Scalars['String']>;\n  mean_motion?: Maybe<Scalars['Float']>;\n  raan?: Maybe<Scalars['Float']>;\n  arg_of_pericenter?: Maybe<Scalars['Float']>;\n  mean_anomaly?: Maybe<Scalars['Float']>;\n};\n\nexport type PayloadVolume = {\n  __typename?: 'PayloadVolume';\n  cubic_meters?: Maybe<Scalars['Int']>;\n  cubic_feet?: Maybe<Scalars['Int']>;\n};\n\nexport type Position = {\n  __typename?: 'Position';\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type PressurizedCapsule = {\n  __typename?: 'PressurizedCapsule';\n  payload_volume?: Maybe<PayloadVolume>;\n};\n\nexport type Roadster = {\n  __typename?: 'Roadster';\n  name: Scalars['String'];\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_mass_kg?: Maybe<Scalars['Int']>;\n  launch_mass_lbs?: Maybe<Scalars['Int']>;\n  norad_id?: Maybe<Scalars['Int']>;\n  epoch_jd?: Maybe<Scalars['Float']>;\n  orbit_type?: Maybe<Scalars['String']>;\n  apoapsis_au?: Maybe<Scalars['Float']>;\n  semi_major_axis_au?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  inclination?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  periapsis_arg?: Maybe<Scalars['Float']>;\n  period_days?: Maybe<Scalars['Float']>;\n  speed_kph?: Maybe<Scalars['Float']>;\n  speed_mph?: Maybe<Scalars['Float']>;\n  earth_distance_km?: Maybe<Scalars['Float']>;\n  earth_distance_mi?: Maybe<Scalars['Float']>;\n  mars_distance_km?: Maybe<Scalars['Float']>;\n  mars_distance_mi?: Maybe<Scalars['Float']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Rocket = {\n  __typename?: 'Rocket';\n  id?: Maybe<Scalars['Int']>;\n  active?: Maybe<Scalars['Boolean']>;\n  stages?: Maybe<Scalars['Int']>;\n  boosters?: Maybe<Scalars['Int']>;\n  cost_per_launch?: Maybe<Scalars['Int']>;\n  success_rate_pct?: Maybe<Scalars['Float']>;\n  first_flight?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  mass?: Maybe<Mass>;\n  payload_weights?: Maybe<Array<Maybe<RocketPayloadWeight>>>;\n  first_stage?: Maybe<RocketFirstStage>;\n  second_stage?: Maybe<RocketSecondStage>;\n  engines?: Maybe<Engines>;\n  landing_legs?: Maybe<LandingLegs>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n};\n\nexport type RocketFirstStage = {\n  __typename?: 'RocketFirstStage';\n  reusable?: Maybe<Scalars['Boolean']>;\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n};\n\nexport type RocketPayload = {\n  __typename?: 'RocketPayload';\n  option_1?: Maybe<Scalars['String']>;\n  option_2?: Maybe<Scalars['String']>;\n  composite_fairing?: Maybe<Fairing>;\n};\n\nexport type RocketPayloadWeight = {\n  __typename?: 'RocketPayloadWeight';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  kg?: Maybe<Scalars['Float']>;\n  lb?: Maybe<Scalars['Float']>;\n};\n\nexport type RocketSecondStage = {\n  __typename?: 'RocketSecondStage';\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust?: Maybe<Thrust>;\n  payloads?: Maybe<RocketPayload>;\n};\n\nexport type Ship = {\n  __typename?: 'Ship';\n  ship_id?: Maybe<Scalars['String']>;\n  ship_name?: Maybe<Scalars['String']>;\n  ship_model?: Maybe<Scalars['String']>;\n  ship_type?: Maybe<Scalars['String']>;\n  roles?: Maybe<Array<Maybe<Scalars['String']>>>;\n  active?: Maybe<Scalars['Boolean']>;\n  imo?: Maybe<Scalars['Int']>;\n  mmsi?: Maybe<Scalars['Int']>;\n  abs?: Maybe<Scalars['Int']>;\n  class?: Maybe<Scalars['Int']>;\n  weight_lbs?: Maybe<Scalars['Float']>;\n  weight_kg?: Maybe<Scalars['Float']>;\n  year_built?: Maybe<Scalars['Int']>;\n  home_port?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  speed_kn?: Maybe<Scalars['Float']>;\n  course_deg?: Maybe<Scalars['Float']>;\n  position?: Maybe<Position>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  url?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n};\n\nexport type Thrust = {\n  __typename?: 'Thrust';\n  kN?: Maybe<Scalars['Float']>;\n  lbf?: Maybe<Scalars['Float']>;\n};\n\nexport type Thruster = {\n  __typename?: 'Thruster';\n  type?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['Int']>;\n  pods?: Maybe<Scalars['Int']>;\n  fuel_1?: Maybe<Scalars['String']>;\n  fuel_2?: Maybe<Scalars['String']>;\n  thrust?: Maybe<Thrust>;\n};\n\nexport type Trunk = {\n  __typename?: 'Trunk';\n  trunk_volume?: Maybe<PayloadVolume>;\n  cargo?: Maybe<TrunkCargo>;\n};\n\nexport type TrunkCargo = {\n  __typename?: 'TrunkCargo';\n  solar_array?: Maybe<Scalars['Int']>;\n  unpressurized_cargo?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type LaunchesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LaunchesQuery = (\n  { __typename?: 'Query' }\n  & { launches?: Maybe<Array<Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_success' | 'launch_year'>\n  )>>> }\n);\n\nexport type LaunchInfoQueryVariables = Exact<{\n  id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type LaunchInfoQuery = (\n  { __typename?: 'Query' }\n  & { launch?: Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'mission_name' | 'launch_success' | 'launch_year' | 'flight_number' | 'launch_date_utc' | 'details'>\n    & { launch_site?: Maybe<(\n      { __typename?: 'LaunchSite' }\n      & Pick<LaunchSite, 'site_name_long'>\n    )>, rocket?: Maybe<(\n      { __typename?: 'LaunchRocket' }\n      & Pick<LaunchRocket, 'rocket_name' | 'rocket_type'>\n    )>, links?: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'video_link' | 'flickr_images'>\n    )> }\n  )> }\n);\n\nexport type RocketInfoQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RocketInfoQuery = (\n  { __typename?: 'Query' }\n  & { rocket?: Maybe<(\n    { __typename?: 'Rocket' }\n    & Pick<Rocket, 'active' | 'company' | 'cost_per_launch' | 'country' | 'description' | 'flickr_images' | 'first_flight' | 'rocket_name' | 'rocket_type' | 'rocket_id'>\n    & { engines?: Maybe<(\n      { __typename?: 'Engines' }\n      & Pick<Engines, 'type' | 'version'>\n    )>, height?: Maybe<(\n      { __typename?: 'Dimension' }\n      & Pick<Dimension, 'meters'>\n    )> }\n  )> }\n);\n\nexport type RocketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type RocketsQuery = (\n  { __typename?: 'Query' }\n  & { rockets?: Maybe<Array<Maybe<(\n    { __typename?: 'Rocket' }\n    & Pick<Rocket, 'active' | 'rocket_id' | 'flickr_images' | 'rocket_name'>\n  )>>> }\n);\n\nexport type ShipInfoQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type ShipInfoQuery = (\n  { __typename?: 'Query' }\n  & { ship?: Maybe<(\n    { __typename?: 'Ship' }\n    & Pick<Ship, 'active' | 'attempted_landings' | 'class' | 'ship_id' | 'imo' | 'ship_name' | 'speed_kn' | 'successful_landings' | 'ship_type' | 'year_built' | 'weight_kg' | 'image'>\n  )> }\n);\n\nexport type ShipsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ShipsQuery = (\n  { __typename?: 'Query' }\n  & { ships?: Maybe<Array<Maybe<(\n    { __typename?: 'Ship' }\n    & Pick<Ship, 'active' | 'ship_id' | 'ship_name' | 'image'>\n  )>>> }\n);\n\n\nexport const LaunchesDocument = gql`\n    query Launches {\n  launches {\n    flight_number\n    mission_name\n    launch_success\n    launch_year\n  }\n}\n    `;\n\n/**\n * __useLaunchesQuery__\n *\n * To run a query within a React component, call `useLaunchesQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLaunchesQuery(baseOptions?: Apollo.QueryHookOptions<LaunchesQuery, LaunchesQueryVariables>) {\n        return Apollo.useQuery<LaunchesQuery, LaunchesQueryVariables>(LaunchesDocument, baseOptions);\n      }\nexport function useLaunchesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LaunchesQuery, LaunchesQueryVariables>) {\n          return Apollo.useLazyQuery<LaunchesQuery, LaunchesQueryVariables>(LaunchesDocument, baseOptions);\n        }\nexport type LaunchesQueryHookResult = ReturnType<typeof useLaunchesQuery>;\nexport type LaunchesLazyQueryHookResult = ReturnType<typeof useLaunchesLazyQuery>;\nexport type LaunchesQueryResult = Apollo.QueryResult<LaunchesQuery, LaunchesQueryVariables>;\nexport const LaunchInfoDocument = gql`\n    query LaunchInfo($id: String) {\n  launch(id: $id) {\n    mission_name\n    launch_success\n    launch_year\n    flight_number\n    launch_date_utc\n    launch_site {\n      site_name_long\n    }\n    rocket {\n      rocket_name\n      rocket_type\n    }\n    details\n    links {\n      video_link\n      flickr_images\n    }\n  }\n}\n    `;\n\n/**\n * __useLaunchInfoQuery__\n *\n * To run a query within a React component, call `useLaunchInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLaunchInfoQuery(baseOptions?: Apollo.QueryHookOptions<LaunchInfoQuery, LaunchInfoQueryVariables>) {\n        return Apollo.useQuery<LaunchInfoQuery, LaunchInfoQueryVariables>(LaunchInfoDocument, baseOptions);\n      }\nexport function useLaunchInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LaunchInfoQuery, LaunchInfoQueryVariables>) {\n          return Apollo.useLazyQuery<LaunchInfoQuery, LaunchInfoQueryVariables>(LaunchInfoDocument, baseOptions);\n        }\nexport type LaunchInfoQueryHookResult = ReturnType<typeof useLaunchInfoQuery>;\nexport type LaunchInfoLazyQueryHookResult = ReturnType<typeof useLaunchInfoLazyQuery>;\nexport type LaunchInfoQueryResult = Apollo.QueryResult<LaunchInfoQuery, LaunchInfoQueryVariables>;\nexport const RocketInfoDocument = gql`\n    query RocketInfo($id: String!) {\n  rocket(id: $id) {\n    active\n    company\n    cost_per_launch\n    country\n    description\n    flickr_images\n    engines {\n      type\n      version\n    }\n    first_flight\n    height {\n      meters\n    }\n    rocket_name\n    rocket_type\n    rocket_id\n  }\n}\n    `;\n\n/**\n * __useRocketInfoQuery__\n *\n * To run a query within a React component, call `useRocketInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useRocketInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRocketInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRocketInfoQuery(baseOptions: Apollo.QueryHookOptions<RocketInfoQuery, RocketInfoQueryVariables>) {\n        return Apollo.useQuery<RocketInfoQuery, RocketInfoQueryVariables>(RocketInfoDocument, baseOptions);\n      }\nexport function useRocketInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RocketInfoQuery, RocketInfoQueryVariables>) {\n          return Apollo.useLazyQuery<RocketInfoQuery, RocketInfoQueryVariables>(RocketInfoDocument, baseOptions);\n        }\nexport type RocketInfoQueryHookResult = ReturnType<typeof useRocketInfoQuery>;\nexport type RocketInfoLazyQueryHookResult = ReturnType<typeof useRocketInfoLazyQuery>;\nexport type RocketInfoQueryResult = Apollo.QueryResult<RocketInfoQuery, RocketInfoQueryVariables>;\nexport const RocketsDocument = gql`\n    query Rockets {\n  rockets {\n    active\n    rocket_id\n    flickr_images\n    rocket_name\n  }\n}\n    `;\n\n/**\n * __useRocketsQuery__\n *\n * To run a query within a React component, call `useRocketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRocketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRocketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useRocketsQuery(baseOptions?: Apollo.QueryHookOptions<RocketsQuery, RocketsQueryVariables>) {\n        return Apollo.useQuery<RocketsQuery, RocketsQueryVariables>(RocketsDocument, baseOptions);\n      }\nexport function useRocketsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RocketsQuery, RocketsQueryVariables>) {\n          return Apollo.useLazyQuery<RocketsQuery, RocketsQueryVariables>(RocketsDocument, baseOptions);\n        }\nexport type RocketsQueryHookResult = ReturnType<typeof useRocketsQuery>;\nexport type RocketsLazyQueryHookResult = ReturnType<typeof useRocketsLazyQuery>;\nexport type RocketsQueryResult = Apollo.QueryResult<RocketsQuery, RocketsQueryVariables>;\nexport const ShipInfoDocument = gql`\n    query ShipInfo($id: String!) {\n  ship(id: $id) {\n    active\n    attempted_landings\n    class\n    ship_id\n    imo\n    ship_name\n    speed_kn\n    successful_landings\n    ship_type\n    year_built\n    weight_kg\n    image\n  }\n}\n    `;\n\n/**\n * __useShipInfoQuery__\n *\n * To run a query within a React component, call `useShipInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useShipInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useShipInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useShipInfoQuery(baseOptions: Apollo.QueryHookOptions<ShipInfoQuery, ShipInfoQueryVariables>) {\n        return Apollo.useQuery<ShipInfoQuery, ShipInfoQueryVariables>(ShipInfoDocument, baseOptions);\n      }\nexport function useShipInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ShipInfoQuery, ShipInfoQueryVariables>) {\n          return Apollo.useLazyQuery<ShipInfoQuery, ShipInfoQueryVariables>(ShipInfoDocument, baseOptions);\n        }\nexport type ShipInfoQueryHookResult = ReturnType<typeof useShipInfoQuery>;\nexport type ShipInfoLazyQueryHookResult = ReturnType<typeof useShipInfoLazyQuery>;\nexport type ShipInfoQueryResult = Apollo.QueryResult<ShipInfoQuery, ShipInfoQueryVariables>;\nexport const ShipsDocument = gql`\n    query Ships {\n  ships {\n    active\n    ship_id\n    ship_name\n    image\n  }\n}\n    `;\n\n/**\n * __useShipsQuery__\n *\n * To run a query within a React component, call `useShipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useShipsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useShipsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useShipsQuery(baseOptions?: Apollo.QueryHookOptions<ShipsQuery, ShipsQueryVariables>) {\n        return Apollo.useQuery<ShipsQuery, ShipsQueryVariables>(ShipsDocument, baseOptions);\n      }\nexport function useShipsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ShipsQuery, ShipsQueryVariables>) {\n          return Apollo.useLazyQuery<ShipsQuery, ShipsQueryVariables>(ShipsDocument, baseOptions);\n        }\nexport type ShipsQueryHookResult = ReturnType<typeof useShipsQuery>;\nexport type ShipsLazyQueryHookResult = ReturnType<typeof useShipsLazyQuery>;\nexport type ShipsQueryResult = Apollo.QueryResult<ShipsQuery, ShipsQueryVariables>;"]},"metadata":{},"sourceType":"module"}