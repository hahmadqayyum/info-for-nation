{"ast":null,"code":"function Version(versionString) {\n  [this.major, this.minor, this.patch] = versionString.split('.');\n}\n\n_c = Version;\n\nVersion.prototype.toString = function () {\n  return this.major + \".\" + this.minor + \".\" + this.patch;\n};\n\nfunction updateConfig(config) {\n  // We don't care about details.previousVersion because this is just about\n  // updating the config\n  // If the config has no version then it was created before 1.11.0, or the\n  // user deleted it\n  const previousVersion = new Version(config.version ? config.version : \"0.0.0\");\n  const currentVersionString = browser.runtime.getManifest().version;\n\n  if (previousVersion.toString() === currentVersionString) {\n    browser.storage.local.set({\n      config: config\n    }).then(() => {\n      // Save anyway because updateConfig is also called on config import\n      console.log(\"Config up to date (v%s), saving to storage anyway.\", previousVersion.toString());\n    }, logUpdateError);\n    return;\n  }\n\n  if (previousVersion.major < 1 || previousVersion.major === 1 && previousVersion.minor < 11) {\n    // For versions before 1.11.0\n    if (typeof localStorage.config !== \"undefined\") {\n      localStorage.clear();\n    }\n  } // Set the config version to the current version\n\n\n  config.version = currentVersionString;\n  browser.storage.local.set({\n    config: config\n  }).then(() => {\n    console.log(\"Config successfully updated from v%s to v%s\", previousVersion.toString(), currentVersionString);\n  }, logUpdateError);\n}\n\nfunction logUpdateError(err) {\n  const version = browser.runtime.getManifest().version;\n  console.log(\"An error occurred while updating to v%s: %s\", version, err);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Version\");","map":{"version":3,"sources":["/home/ahmadqayyum/Desktop/info-for-nation/src/home/src/js/update-config.js"],"names":["Version","versionString","major","minor","patch","split","prototype","toString","updateConfig","config","previousVersion","version","currentVersionString","browser","runtime","getManifest","storage","local","set","then","console","log","logUpdateError","localStorage","clear","err"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,aAAjB,EAAgC;AAC9B,GAAC,KAAKC,KAAN,EAAa,KAAKC,KAAlB,EAAyB,KAAKC,KAA9B,IAAuCH,aAAa,CAACI,KAAd,CAAoB,GAApB,CAAvC;AACD;;KAFQL,O;;AAITA,OAAO,CAACM,SAAR,CAAkBC,QAAlB,GAA6B,YAAW;AACtC,SAAO,KAAKL,KAAL,GAAa,GAAb,GAAmB,KAAKC,KAAxB,GAAgC,GAAhC,GAAsC,KAAKC,KAAlD;AACD,CAFD;;AAIA,SAASI,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B;AACA;AACA;AACA;AACA,QAAMC,eAAe,GAAG,IAAIV,OAAJ,CAAYS,MAAM,CAACE,OAAP,GAAiBF,MAAM,CAACE,OAAxB,GACiB,OAD7B,CAAxB;AAEA,QAAMC,oBAAoB,GAAGC,OAAO,CAACC,OAAR,CAAgBC,WAAhB,GAA8BJ,OAA3D;;AAEA,MAAGD,eAAe,CAACH,QAAhB,OAA+BK,oBAAlC,EAAwD;AACtDC,IAAAA,OAAO,CAACG,OAAR,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0B;AAACT,MAAAA,MAAM,EAAEA;AAAT,KAA1B,EAA4CU,IAA5C,CACE,MAAM;AACJ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ,EACYX,eAAe,CAACH,QAAhB,EADZ;AAED,KALH,EAMEe,cANF;AAQA;AACD;;AAED,MAAGZ,eAAe,CAACR,KAAhB,GAAwB,CAAxB,IAA8BQ,eAAe,CAACR,KAAhB,KAA0B,CAA1B,IACGQ,eAAe,CAACP,KAAhB,GAAwB,EAD5D,EACiE;AAC/D;AACA,QAAG,OAAOoB,YAAY,CAACd,MAApB,KAA+B,WAAlC,EAA+C;AAC7Cc,MAAAA,YAAY,CAACC,KAAb;AACD;AACF,GA3B2B,CA6B5B;;;AACAf,EAAAA,MAAM,CAACE,OAAP,GAAiBC,oBAAjB;AAEAC,EAAAA,OAAO,CAACG,OAAR,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0B;AAACT,IAAAA,MAAM,EAAEA;AAAT,GAA1B,EAA4CU,IAA5C,CACE,MAAM;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EACYX,eAAe,CAACH,QAAhB,EADZ,EAEYK,oBAFZ;AAGD,GALH,EAMEU,cANF;AAQD;;AAED,SAASA,cAAT,CAAwBG,GAAxB,EAA6B;AAC3B,QAAMd,OAAO,GAAGE,OAAO,CAACC,OAAR,CAAgBC,WAAhB,GAA8BJ,OAA9C;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DV,OAA3D,EAAoEc,GAApE;AACD","sourcesContent":["function Version(versionString) {\n  [this.major, this.minor, this.patch] = versionString.split('.');\n}\n\nVersion.prototype.toString = function() {\n  return this.major + \".\" + this.minor + \".\" + this.patch;\n}\n\nfunction updateConfig(config) {\n  // We don't care about details.previousVersion because this is just about\n  // updating the config\n  // If the config has no version then it was created before 1.11.0, or the\n  // user deleted it\n  const previousVersion = new Version(config.version ? config.version\n                                                     : \"0.0.0\");\n  const currentVersionString = browser.runtime.getManifest().version;\n\n  if(previousVersion.toString() === currentVersionString) {\n    browser.storage.local.set({config: config}).then(\n      () => {\n        // Save anyway because updateConfig is also called on config import\n        console.log(\"Config up to date (v%s), saving to storage anyway.\",\n                    previousVersion.toString());\n      },\n      logUpdateError\n    );\n    return;\n  }\n\n  if(previousVersion.major < 1 || (previousVersion.major === 1\n                                   && previousVersion.minor < 11)) {\n    // For versions before 1.11.0\n    if(typeof localStorage.config !== \"undefined\") {\n      localStorage.clear();\n    }\n  }\n\n  // Set the config version to the current version\n  config.version = currentVersionString;\n\n  browser.storage.local.set({config: config}).then(\n    () => {\n      console.log(\"Config successfully updated from v%s to v%s\",\n                  previousVersion.toString(),\n                  currentVersionString);\n    },\n    logUpdateError\n  );\n}\n\nfunction logUpdateError(err) {\n  const version = browser.runtime.getManifest().version;\n  console.log(\"An error occurred while updating to v%s: %s\", version, err);\n}\n\n"]},"metadata":{},"sourceType":"module"}